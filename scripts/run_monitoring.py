#!/usr/bin/env python3
"""
ML Monitoring Script
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ML –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
"""

import argparse
import os
import sys
import time
import logging
from datetime import datetime, timedelta
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('monitoring.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def setup_logging(log_dir="logs"):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    log_path = Path(log_dir)
    log_path.mkdir(exist_ok=True)
    
    file_handler = logging.FileHandler(log_path / "monitoring.txt")
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
    logger.addHandler(file_handler)

def monitor_system(duration_hours=72):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
    
    Args:
        duration_hours (int): –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —á–∞—Å–∞—Ö
    """
    start_time = datetime.now()
    end_time = start_time + timedelta(hours=duration_hours)
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ {duration_hours} —á–∞—Å–æ–≤")
    logger.info(f"üìÖ –ù–∞—á–∞–ª–æ: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    iteration = 0
    
    try:
        while datetime.now() < end_time:
            iteration += 1
            current_time = datetime.now()
            remaining_time = end_time - current_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            if iteration % 60 == 1:  # –∫–∞–∂–¥—ã–π —á–∞—Å –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 10 —Å–µ–∫—É–Ω–¥
                logger.info(f"üìä –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}")
                logger.info(f"‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
                logger.info(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {str(remaining_time).split('.')[0]}")
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ ML –º–æ–¥–µ–ª–∏, –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ç.–¥.
                # –ù–∞–ø—Ä–∏–º–µ—Ä:
                # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
                # - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPU/CPU
                # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                # - –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫
            
            # –°–ø–∏–º 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            time.sleep(10)
    
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
        return 1
    
    logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    return 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='ML Monitoring Script')
    parser.add_argument(
        '--duration-hours', 
        type=int, 
        default=72,
        help='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 72)'
    )
    parser.add_argument(
        '--log-dir',
        type=str,
        default='logs',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: logs)'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.log_dir)
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    return monitor_system(args.duration_hours)

if __name__ == "__main__":
    sys.exit(main())
