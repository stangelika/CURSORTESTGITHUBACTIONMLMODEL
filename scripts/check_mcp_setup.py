#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import json
import subprocess
import sys
from pathlib import Path

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ Docker"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...")
    try:
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
        result = subprocess.run(['docker', 'ps'], 
                              capture_output=True, text=True, check=True)
        print("‚úÖ Docker –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop: https://www.docker.com/products/docker-desktop/")
        return False

def check_mcp_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP...")
    
    config_path = Path(".vscode/mcp.json")
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª .vscode/mcp.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        if 'servers' in config and 'github' in config['servers']:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub MCP –Ω–∞–π–¥–µ–Ω–∞")
            
            github_config = config['servers']['github']
            if github_config.get('command') == 'docker':
                print("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker")
            
            toolsets = github_config.get('env', {}).get('GITHUB_TOOLSETS', '')
            if toolsets:
                print(f"‚úÖ –ù–∞–±–æ—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {toolsets}")
            
            return True
        else:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub MCP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False

def check_cursor_rules():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª Cursor"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª Cursor...")
    
    rules_path = Path("cursorrules.txt")
    if not rules_path.exists():
        print("‚ùå –§–∞–π–ª cursorrules.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(rules_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if "GitHub MCP" in content:
            print("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è GitHub MCP –Ω–∞–π–¥–µ–Ω—ã")
            return True
        else:
            print("‚ùå –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è GitHub MCP –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}")
        return False

def pull_github_mcp_image():
    """–ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–∞ GitHub MCP"""
    print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–∞ GitHub MCP...")
    try:
        result = subprocess.run([
            'docker', 'pull', 'ghcr.io/github/github-mcp-server'
        ], capture_output=True, text=True, check=True)
        print("‚úÖ Docker –æ–±—Ä–∞–∑ GitHub MCP –∑–∞–≥—Ä—É–∂–µ–Ω")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–∑–∞: {e.stderr}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤\n")
    
    checks = [
        ("Docker", check_docker),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP", check_mcp_config),
        ("–ü—Ä–∞–≤–∏–ª–∞ Cursor", check_cursor_rules)
    ]
    
    all_passed = True
    for name, check_func in checks:
        if not check_func():
            all_passed = False
    
    if all_passed and check_docker():
        print("\nüéØ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å Docker –æ–±—Ä–∞–∑
        if pull_github_mcp_image():
            print("\n‚ú® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor")
            print("2. –ü–æ–ª—É—á–∏—Ç–µ GitHub Personal Access Token (—Å–º. GITHUB_MCP_SETUP.md)")
            print("3. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: '–ü–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏'")
        else:
            print("\n‚ö†Ô∏è –û–±—Ä–∞–∑ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ç–æ–≤—ã.")
            print("Docker –∑–∞–≥—Ä—É–∑–∏—Ç –æ–±—Ä–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        sys.exit(1)

if __name__ == "__main__":
    main()





